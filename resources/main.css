* { box-sizing: border-box; }
html {
    overflow: hidden;
}
body {
    font-family: "Helvetica Neue", arial, sans-serif;
}

a {
    text-decoration: none;
    /*color: #fff;*/
    color: inherit;
}

/* Work around a bad Firefox browser style.  It sets transform-origin to 0 0
 * on :not(svg), which is wrong because it includes things *inside* svgs, breaking
 * our <line transform-origin>s. */
:not(svg), :not(foreignObject) > svg {
    transform-origin: inherit;
}

/* Theme colors: */
body {
    --button-color: #888;
    --button-highlight-color: #eee;

    /* Colors for major UI boxes */
    --ui-bg-color: #222;
    --ui-fg-color: #fff;
    --ui-border-color: #000;
    --ui-shadow-color: #000; /* the shadow around some major UI elements */
    --ui-bg-section-color: #555; /* color for sections within UI, like the description box */

    --toggle-button-fg-disabled-color: #666;
    --toggle-button-fg-dim-color: #888;
    --toggle-button-fg-color: #fff;
    --toggle-button-bg-dim-color: #222;
    --toggle-button-bg-color: #444;

    /* Color for frames like popup menus */
    --frame-bg-color: #000;
    --frame-fg-color: #fff;
    --frame-border-color: #444;

    --dropdown-menu-hover-color: #444;

    /* Box links used for selection in the search UI: */
    --box-link-fg-color: var(--frame-fg-color);
    --box-link-bg-color: var(--frame-bg-color);
    --box-link-disabled-color: #888;
    --box-link-hover-color: #443;
    --box-link-selected-color: #008;

    /* Color for the minor text style, eg. the bookmark and like counts.
     * This is smaller text, with a text border applied to make it readable. */
    --minor-text-fg-color: #aaa;
    --minor-text-shadow-color: #000;

    --title-fg-color: #fff; /* title strip in image-ui */
    --title-bg-color: #444;

    --like-button-color: #888;
    --like-button-liked-color: #ccc;
    --like-button-hover-color: #fff;
}

body.light {
    --ui-bg-color: #eee;
    --ui-fg-color: #222;
    --ui-border-color: #ccc;
    --ui-shadow-color: #fff;
    --ui-bg-section-color: #ccc; /* color for subsections */

    --button-color: #666;
    --button-highlight-color: #222;

    --toggle-button-fg-dim-color: #222;
    --toggle-button-fg-color: #000;
    --toggle-button-bg-dim-color: #eee;
    --toggle-button-bg-color: #ccc;

    --frame-bg-color: #fff;
    --frame-fg-color: #222;

    --dropdown-menu-hover-color: #ccc;

    --box-link-hover-color: #ddc;
    --box-link-selected-color: #ffc;

    --minor-text-fg-color: #555; /* 555 */
    --minor-text-shadow-color: #fff; /* fff */

    --title-fg-color: #fff;
    --title-bg-color: #888;

    --like-button-liked-color: #222;
    --like-button-hover-color: #000;
}
ul {
    padding: 0;
    margin: 0;
}
.view:focus {
    /* Views have tabindex: -1 set.  This causes Chrome to put a blue outline around them
     * when they're focused, which just puts a weird border around the whole window.  Remove
     * it. */
    outline: none;
}
.view-illust-container {
    width: 100%;
    height: 100%;
}

.image-container, .preview-container {
    width: 100%;
    height: 100%;
    user-select: none;
    -moz-user-select: none;
    cursor: pointer;
}

.background-image {
    z-index: -1000;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    position: absolute;
    object-fit: cover;
    filter: blur(50px);
}

img.low-res-preview {
    filter: brightness(80%);
}

[hidden] {
    display: none !important;
}

textarea:focus, input:focus, a:focus {
    outline: none;
}

.hide-cursor { cursor: none !important; }
.hide-cursor * { cursor: inherit !important; }

.main-container {
    position: fixed;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    overflow: hidden;
}
.progress-bar {
    position: absolute;
    pointer-events: none;
    background-color: #00F;
    bottom: 0px;
    left: 0px;
    width: 100%;
    height: 2px;
}
@keyframes flash-progress-bar { to { opacity: 0; } }
.progress-bar.hide {
    animation: flash-progress-bar 500ms linear 1 forwards;
}

.loading-progress-bar .progress-bar {
    z-index: 100;
}

/* .seek-bar is the outer seek bar area, which is what can be dragged. */
.seek-bar {
    position: absolute;
    bottom: 0px;
    left: 0px;
    width: 100%;

    box-sizing: content-box;
    height: 12px;
    padding-top: 25px;

    cursor: pointer;
}

.seek-bar .seek-empty {
    height: 100%;
    background-color: rgba(0,0,0,0.25);
}

.seek-bar .seek-fill {
    background-color: #F00;
    height: 100%;
}

.seek-bar .seek-empty {
    transition: transform .25s;
    transform: translate(0, 12px);
}

.seek-bar.visible .seek-empty {
    transform: translate(0, 6px);
}
.seek-bar.dragging .seek-empty {
    transform: translate(0, 0);
}

.title-font {
    font-weight: 700;
    font-size: 20px;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell,
        Droid Sans, Helvetica Neue, Hiragino Kaku Gothic ProN, Meiryo, sans-serif;
}

.small-font {
    font-size: 0.8em;
}

.hover-message,
.view-search-container > .no-results {
    width: 100%;
    position: absolute;
    bottom: 0px;
    display: flex;
    justify-content: center;    
}

.hover-message {
    transition: opacity .25s;
    opacity: 0;
    pointer-events: none;
    z-index: 100;
}

.hover-message.show {
    opacity: 1;
}

/* The version in the search container is always centered. */
.view-search-container > .no-results {
    bottom: 50%;
}

.hover-message > .message,
.view-search-container > .no-results > .message {
    background-color: var(--frame-bg-color);
    color: var(--frame-fg-color);
    font-size: 1.4em;
    padding: 6px 15px;
    margin: 4px;
    max-width: 600px;
    text-align: center;
    border-radius: 5px;
    box-shadow: 0 0 10px 5px #aaa;
}

.view-illust-container .ui {
    position: absolute;
    top: 0px;
    left: 0px;
    min-width: 450px;
    max-height: 500px;
    width: 30%;
    height: auto;

    /* Disable events on the top-level container, so it doesn't block clicks on the
     * image when the UI isn't visible.  We'll reenable events on the hover-box and ui-box
     * below it where we actually want pointer events. */
    pointer-events: none;
}
.view-illust-container .ui-box {
    pointer-events: none;
}
.view-illust-container .ui.disabled {
    display: none;
}

/*
 * This is the box that triggers the UI to be displayed.  We use this rather than
 * ui-box for this so we can give it a fixed size.  That way, the UI box won't suddenly
 * appear when changing to another image because a longer description caused the box
 * to become bigger.
 *
 * This is a little tricky.  Hovering over either hover-box or the UI makes it visible.
 * When the UI is hidden, it's set to pointer-events: none, so it can't be hovered,
 * but once you hover over hover-box and cause the UI to be visible, pointer events
 * are reenabled so hovering over anywhere in the UI keeps it visible.  The UI is
 * over hover-box in the Z order, so we don't need to disable pointer events on hover-box
 * to prevent it from blocking the UI.
 *
 * We also disable pointer-events on the UI until it's visible, so it doesn't receive
 * clicks until it's visible.
 */
.hover-box {
    width: 400px;
    height: 200px;
    position: absolute;
    top: 0;
    left: 0;
    pointer-events: auto; /* reenable pointer events that are disabled on .ui */
}
.hover-sphere {
    width: 500px;
    height: 500px;

    /* Clamp the sphere to a percentage of the viewport width, so it gets smaller for
     * small windows. */
    max-width: 30vw;
    max-height: 30vw;
    position: absolute;
    top: 0;
    left: 0;
}
.hover-sphere circle {
    pointer-events: auto; /* reenable pointer events that are disabled on .ui */
}
.hover-sphere > svg {
    width: 100%;
    height: 100%;
    transform: translate(-50%,-50%)
}
.ui-box {
    background-color: var(--ui-bg-color);
    color: var(--ui-fg-color);
    border: solid 2px var(--ui-border-color);
    padding: 1em;
    border-radius: 8px;
    position: relative;
}

.view-illust-container .ui-box {
    margin: .5em;
}

.view-manga-container .ui-container {
    width: 600px;
    max-width: 90%;
    pointer-events: auto;
}

/* Since the UI isn't a popup on the manga page, hide the description and
 * tag list to make it smaller.  These can be viewed while viewing a page. */
.view-manga-container .ui-box > .description,
.view-manga-container .ui-box > .tag-list
{
    display: none;
}

.view-illust-container .ui-box {
    transition: transform .25s, opacity .25s;
    opacity: 0;
    transform: translate(-50px, 0);
    pointer-events: none;
}

/* Debugging: */
body.force-ui .view-illust-container .ui > .ui-box {
    opacity: 1;
    transform: translate(0, 0);
    pointer-events: inherit;
}

/* Show the UI on hover when hide-ui isn't set. */
body:not(.hide-ui) .view-illust-container .ui-box.hovering-over-box,
body:not(.hide-ui) .view-illust-container .ui-box.hovering-over-sphere {
    opacity: 1;
    transform: translate(0, 0);
    pointer-events: auto;
}

.button-row {
    display: flex;
    flex-direction: row;
    align-items: center;
    height: 32px;
    margin-top: 5px;
    margin-bottom: 4px;
}
.button-row .button.enabled {
    cursor: pointer;
}

/* The row with the search title, with buttons aligned to the right.  The buttons
 * are always aligned to the top if the title is long. */
.title-with-button-row {
    display: flex;
    flex-direction: row;
    align-items: start;
}

/* An icon in a button strip. */
.icon-button {
    display: block;
    width: 32px;
    height: auto;
}

/* If this is an icon-button with an svg inside, set the svg to block. */
.icon-button > svg {
    display: block;
}
.disable-ui-button:hover > .icon-button {
    color: #0096FA;
}
.whats-new-button.updates > svg {
    color: #cc0;
}
body.light .whats-new-button.updates > svg {
    color: #0aa; /* yellow doesn't work in a light theme */
}

.navigate-out-button {
    cursor: pointer;
}

.popup-menu-box .menu-toggle {
    display: block;
}
.menu-slider input {
    vertical-align: middle;
    width: 100%;
    padding: 0;
    margin: 0;
}

.popup.avatar-popup:hover:after {
    left: auto;
    bottom: auto;
    top: 60px;
    right: -10px;
}
.follow-container .avatar {
    transition: filter .25s;
    display: block;
    position: relative;
}
/* .avatar contains an image, and a canvas overlaid on top for hover effects. */
.follow-container .avatar > canvas {
    border-radius: 5px;
    object-fit: cover;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
}
.follow-container .avatar > canvas.highlight {
    opacity: 0;
    transition: opacity .25s;
}
.follow-container .avatar:hover > canvas.highlight {
    opacity: 1;
}
.follow-container:not(.big) .avatar {
    width: 50px;
    height: 50px;
}
/* For the avatar in the popup menu, use the same size as the other popup menu buttons. */

.avatar-widget-container .follow-container .avatar {
    width: 44px;
    height: 44px;
}
.follow-container.big .avatar {
    width: 170px;
    height: 170px;
}

/* Hide the avatar while we're waiting for user data to load, since the follow icons aren't
 * updated until then. */
.follow-container.loading {
    visibility: hidden;
    pointer-events: none;
}

/* The API doesn't tell us whether a follow is private or not, so we can't show
 * it.  The lock is only used to distinguish the "follow" and "follow privately"
 * buttons. */
.follow-icon .lock {
    stroke: #888;
}
.follow-icon:not(.private) .lock {
    display: none !important;
}
.follow-container .follow-icon:not(:hover) .outline1 {
    stroke: none !important;
}

/* Hide the following icon if we're not following. */
.follow-container:not(.followed) .follow-icon.following-icon {
    display: none;
}
/* Hide the follow buttons if we're already following. */
.follow-container.followed .follow-icon.follow-button {
    display: none;
}

/* Only show the follow buttons on hover (but always show the following icon). */
.follow-container:not(:hover) .follow-icon.follow-button {
    display: none;
}
/* If use-dropdown is set, this avatar is using the dropdown UI and doesn't show the
 * follow/unfollow overlay buttons. */
.follow-container[data-mode="dropdown"] .follow-icon.follow-button {
    display: none;
}
/* Don't show follow buttons or the follow popup for the user. */
.follow-container.self .follow-icon,
.follow-container.self .follow-popup
{
    display: none;
}

.follow-container .follow-icon {
    position: absolute;
    bottom: 0;
    text-align: center;
    height: auto;
}
.follow-container .follow-icon {
    width: 50%; /* half the size of the container */
    max-width: 50px; /* limit the size for larger avatar displays */
}

.follow-container .follow-icon.bottom-left {
    left: 0;
}
.follow-container .follow-icon.bottom-right {
    right: 0;
}

/* In small avatar buttons, nudge the follow buttons down off of the
 * avatar, so they don't appear right under the cursor when you're trying
 * to click the avatar itself.  Only do this with the follow buttons that
 * appears on hover, not the following icon (unfollow button), and don't
 * do it with the big avatars. */
.follow-container:not(.big) .follow-button {
    top: calc(100% - 5px);
}

.follow-container .follow-icon > svg {
    display: block;
    width: 100%;
    height: auto;
    transition: opacity .25s;

    /* Move the icon down, so the bottom of the eye is along the bottom of the
     * container and the lock (if visible) overlaps. */
    margin-bottom: -20%;
}
.follow-container:not(:hover) .follow-icon > svg {
    opacity: 0.5;
}
.follow-container .follow-icon > svg .middle {
    transition: transform .1s ease-in-out;
    transform: translate(0px, -2px);
}
.follow-container .follow-icon.unfollow-button > svg .middle {
    transform: translate(-2px, -5px);
}
.follow-container .follow-icon.unfollow-button:hover > svg .middle {
    transform: translate(2px, 5px);
}
/* Don't fade the icons in the context menu, since it's too small and it makes
 * it too hard to see at a glance. */
.popup-context-menu .follow-container .follow-icon > svg {
    opacity: 1;
}

.follow-popup {
    margin-top: 10px;
    right: 0px;
}
.follow-container .hover-area {
    top: -12px;
}
.follow-container .avatar-link {
    display: block;
}
.follow-popup .folder {
    display: block;
}

.follow-container.followed .follow-popup .not-following { display: none; }
.follow-container:not(.followed) .follow-popup .following { display: none; }

/* Hide the follow dropdown when following, since there's nothing in it. */
.follow-container.followed.popup-visible .popup-menu-box.hover-menu-box {
    visibility: hidden;
}

.title-block {
    display: inline-block;
    padding: 0 10px;
    color: var(--title-fg-color);
    background-color: var(--title-bg-color);
    margin-right: 1em;
    border-radius: 8px 0;
}
.title-block.popup:hover:after {
    top: 40px;
    bottom: auto;
}
.author {
    vertical-align: top;
}
/* When .dot is set, show images with nearest neighbor filtering. */
body.dot img.filtering,
body.dot canvas.filtering {
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
}
.bulb-button:hover > .icon-button {
    color: #FF0 !important; /* override grey-icon hover color */
}

body.light .bulb-button:hover > .icon-button {
    stroke: #000;
}

.bulb-button > .icon-button {
    margin-top: -3px;
}

.post-info > * {
    display: inline-block;
    background-color: var(--box-link-bg-color);
    color: var(--box-link-fg-color);
    padding: 2px 10px;

    /* Use a smaller, heavier font to distinguish these from tags. */
    font-size: .8em;
    font-weight: bold;
}
.description {
    border: solid 1px var(--ui-border-color);
    padding: .35em;
    background-color: var(--ui-bg-section-color);
    max-height: 10em;
    overflow-y: auto;
}
body.light .description {
    border: none;
}
/* Override obnoxious colors in descriptions.  Why would you allow this? */
.description * {
    color: var(--ui-fg-color);
}

.popup {
    position: relative;
}

.popup:hover:after {
    pointer-events: none;
    background: #111;
    border-radius: .5em;
    left: 0em;
    top: -2.0em;
    color: #fff;
    content: attr(data-popup);
    display: block;
    padding: .3em 1em;
    position: absolute;
    text-shadow: 0 1px 0 #000;
    white-space: nowrap;
    z-index: 98;
}
.popup-bottom:hover:after {
    top: auto;
    bottom: -2em;
}

body:not(.premium) .premium-only { display: none; }
body.hide-r18 .r18 { display: none; }
body.hide-r18g .r18g { display: none; }

.popup-menu-box {
    position: absolute;
    min-width: 10em;
    background-color: var(--frame-bg-color);
    border: 1px solid var(--frame-border-color);
    padding: .25em .5em;
    z-index: 2;
}

.menu-button {
    cursor: pointer;
}

.popup-menu-box.hover-menu-box {
    visibility: hidden;
}
.popup-visible .popup-menu-box.hover-menu-box {
    visibility: inherit;
}

/* This is an invisible block underneath the hover zone to keep the hover UI visible. */
.hover-area {
    position: absolute;
    top: -50%;
    left: -33%;
    width: 150%;
    height: 200%;
    z-index: -1;
}
/* This one is under the bookmark popup.  Extend over the bottom, so the list doesn\'t disappear
 * when deleting a recent bookmark at the bottom of the list, but don\'t extend over the top, so
 * we don\'t block the mouse hovering over other things.
 *
 * Note that the positioning of this is important: we want to fully close the gap between the
 * popup and the bottom that opened it, but we don't want to overlap the button and block it. */
.navigation-menu-box .hover-area,
.settings-menu-box .hover-area,
.image-settings-menu-box .hover-area
{
    top: -2px;
    height: 125%;
}

.follow-popup input{
    margin: .25em;
    padding: .25em;
}
.popup-menu-box .button {
    padding: .25em;
    cursor: pointer;
    width: 100%;
}

.popup-menu-box .button:hover {
    background-color: var(--dropdown-menu-hover-color);
}

.view-search-container {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    overflow-x: hidden;
    /* Always show the vertical scrollbar, so we don't relayout as images load. */
    overflow-y: scroll;
    color: #fff;
}

.top-ui-box
{
    /* This places the thumbnail UI at the top, so the thumbnails sit below it when
     * scrolled all the way up, and scroll underneath it. */
    position: sticky;
    top: 0;
    width: 100%;
    display: flex;
    flex-direction: row;
    align-items: center;
    padding-top: 1em;
    padding-bottom: .5em;
    z-index: 1;

    /* Prevent the empty space around the UI for centering from eating button presses. */
    pointer-events: none;
}

/* If .ui-on-hover is set, switch to showing the top UI when it's hovered instead of sticky. */
body.ui-on-hover .top-ui-box
{
    position: fixed;
    top: auto;
    bottom: 100%;
    transition: transform ease-out .2s;

    /* Normally pointer-events is disabled above, so the sides of the UI box don't cover clicks.
     * However, that also makes the hover not include the top padding above the UI, causing it
     * to flicker on and off when the mouse is in that area.  This is tricky to fix nicely, so just
     * stop disabling pointer-events when ui-on-hover is enabled. */
    pointer-events: auto;
}

/* This is used to temporarily disable the transition when the ui-on-hover setting is
 * changed in the options menu. */
body.ui-on-hover .top-ui-box.disable-transition
{
    transition: none;
}

/* .force-open is set to lock the UI in place when a menu is open.  It has the same
 * effect as a hover. */
body.ui-on-hover .top-ui-box.hover,
body.ui-on-hover .top-ui-box.force-open
{
    transform: translateY(100%);
}

body.ui-on-hover .top-ui-box:not(.hover):not(.force-open)
{
    /* This is the amount the UI pokes on-screen when not hovered. */
    transform: translateY(40px);
}

/* When ui-on-hover is disabled we get spacing at the top of the thumbs automatically from
 * position: sticky, but ui-on-hover is position: fixed and we don't get that, so we have
 * to add padding manually. */
body.ui-on-hover .top-ui-box + .top-ui-box-padding
{
    height: 30px;
}

.view-search-container .thumbnail-ui-box {
    width: 50%;
    /* Make sure this doesn't get too narrow, or it'll overlap too much of the thumbnail area. */
    min-width: 800px;
    background-color: var(--ui-bg-color);
    color: var(--ui-fg-color);
    box-shadow: 0 0 15px 10px var(--ui-shadow-color);
    border-radius: 4px;

    padding: 10px;
    pointer-events: auto;
}

.view-search-container .thumbnail-ui-box .displaying {
    padding-bottom: 4px;
}


.view-search-container .thumbnail-ui-box .displaying .word {
    padding: 0px 5px;
}
.view-search-container .thumbnail-ui-box .displaying .word:first-child {
    padding-left: 0px; /* remove left padding from the first item */
}

.view-search-container .thumbnail-ui-box .displaying .word.or {
    font-size: 12px;
    padding: 0;
    color: #bbb;
}

.view-search-container .thumbnail-ui-box .bookmarks-link,
.view-search-container .thumbnail-ui-box .following-link {
    display: block;
}

.view-search-container .thumbnail-ui-box .following-link {
    width: 32px;
    height: 32px;
}

.view-search-container .thumbnail-ui-box .contact-link {
    display: block;
    width: 31px;
    height: 31px;
    margin: 0 3px;
}

.view-search-container .thumbnail-ui-box .webpage-link {
    display: block;
    margin: 0 2px;
    width: 26px;
    height: 26px;
}

.view-search-container .thumbnail-ui-box .twitter-icon,
.view-search-container .thumbnail-ui-box .pawoo-icon {
    display: block;
    width: 32px;
    height: 32px;
    margin: 0 1px;
}

/* .thumbnails is the actual thumbnail list. */
.view-search-container .thumbnails {
    user-select: none;
    -moz-user-select: none;
    padding: 0;
    text-align: center;
}

.view-search-container ul.thumbnails {
    margin: 0;
    margin: 0 auto; /* center */
}
.view-search-container ul.thumbnails > li
{
    list-style-type: none;
}

li.thumbnail-box.load-previous {
    width: 100%;
}

li.thumbnail-load-previous > .load-previous-page-link {
    margin-left: auto;
    margin-right: auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 40px;
    width: 100%;
    max-width: 800px;
    background-color: #880;
    color: var(--box-link-fg-color);
    background-color: var(--box-link-bg-color);
    margin-top: 10px;
    margin-bottom: 4px;
}
li.thumbnail-load-previous > .load-previous-page-link:hover {
    background-color: var(--box-link-hover-color);
}

li.thumbnail-box {
    display: inline-block;
    padding: 1em;
}
/* Hide pending images (they haven't been set up yet). */
li.thumbnail-box[data-pending] {
    visibility: hidden;
}
li.thumbnail-box .thumbnail-inner {
    position: relative;
}

li.thumbnail-box a.thumbnail-link {
    display: block;

    border-radius: 4px;
    overflow: hidden;
    position: relative;
    text-decoration: none;
    color: #fff;
}

.page-count-box {
    position: absolute;
    right: 2px;
    bottom: 2px;
    padding: 4px 8px;
    background-color: rgba(0,0,0,.6);
    border-radius: 6px;
}

.page-count-box .page-icon {
    width: 16px;
    height: 16px;
    display: inline-block;
    vertical-align: middle;
}

.page-count-box {
    transition: opacity .5s;
}
.thumbnail-inner:hover .page-count-box {
/*    opacity: 0.5;*/
}

.page-count-box .page-count {
    vertical-align: middle;
    margin-left: -4px;
}

/* The similar illusts button on top of thumbnails. */
.view-search-container li.thumbnail-box .similar-illusts-button {
    display: block;
    width: 32px;
    height: 32px;
    margin-top: -2px;
}
.view-search-container li.thumbnail-box:not(:hover) .similar-illusts-button {
    visibility: hidden;
}
.view-search-container li.thumbnail-box .similar-illusts-button {
    color: #FF0 !important; /* override grey-icon hover color */
    opacity: 0.5;

    /* Use a very subtle stroke when not hovered, so it's not completely invisible
     * on light backgrounds. */
    stroke: rgba(0,0,0,0.5);
}
.view-search-container li.thumbnail-box .similar-illusts-button:hover {
    opacity: 1;
    stroke: #000;
}

.view-search-container li.thumbnail-box .thumbnail-bottom-left {
    position: absolute;
    display: flex;
    left: 0px;
    bottom: 0px;
}
.view-search-container li.thumbnail-box .heart {
    pointer-events: none;
    width: 32px;
    height: 32px;
}
.view-search-container li.thumbnail-box .heart > svg {
    transition: opacity .5s;
}

.thumbnail-inner:hover .heart > svg {
    opacity: 0.5;
}
.view-search-container li.thumbnail-box .ugoira-icon {
    pointer-events: none;
    width: 32px;
    height: 32px;
    right: 0px;
    bottom: 0px;
    color: #fff;
    position: absolute;
    transition: opacity .5s;
}

.thumbnail-inner:hover .ugoira-icon {
    opacity: 0.5;
}

.view-search-container li.thumbnail-box[data-pending] a {
    /* Don't show a grey box while an image is pending.  It just causes extra
     * flicker. */
/*    opacity: 0.5;
    background-color: #444;*/
}

/* The popup title below thumbs: */
.thumbnail-inner > .thumbnail-label {
    position: absolute;
    bottom: 3px;
    pointer-events: none;
    white-space: nowrap;
    color: var(--frame-fg-color);
    background-color: var(--frame-bg-color);
    left: 50%;
    position: absolute;
    transform: translate(-50%, 0);
    padding: 1px 8px;

    /* Max width fills the thumbnail the label is in, minus some space so we don't overlap bottom-left icons. */
    max-width: calc(100% - 50px);
    overflow: hidden;
    border-radius: 2px;
    text-overflow: ellipsis;
}
.thumbnail-inner .thumbnail-label > .label {
    /* Specify a line-height explicitly, so vertical centering is reasonably consistent for
     * both EN and JP text. */
    line-height: 19px;
}

/* Hide the img while it's pending so we don't show a broken image icon. */
li.thumbnail-box[data-pending] a img.thumb {
    display: none;
}

.thumbnail-box .thumb {
    object-fit: cover;

    /* Show the top-center of the thunbnail.  This generally makes more sense
     * than cropping the center. */
    object-position: 50% 0%;    
    width: 100%;
    height: 100%;
}

/* Be careful not to set any transform: scale if zooming is disabled.  A scale of 1
 * will cause thumbnails to shift around in Firefox. */
body:not(.disable-thumbnail-zooming) .view-search-container .thumbnail-box .thumb {
    transition: transform .5s;
    transform: scale(1.25, 1.25);
}

body:not(.disable-thumbnail-zooming) .view-search-container .thumbnail-box .thumbnail-inner:hover .thumb {
    transform: scale(1, 1);
}

.thumbnail-box.vertical-panning .thumb,
.thumbnail-box.horizontal-panning .thumb
{
    animation-duration: 4s;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
}

.thumbnail-box .thumbnail-inner:not(:hover) .thumb {
    animation-play-state: paused;
}

body:not(.disable-thumbnail-panning) .thumbnail-box.horizontal-panning .thumb {
    animation-name: pan-thumbnail-horizontally;
    object-position: left top;

    /* The full animation is 4 seconds, and we want to start 20% in, at the halfway
     * point of the first left-right pan, where the pan is exactly in the center where
     * we are before any animation.  This is different from vertical panning, since it
     * pans from the top, which is already where we start (top center). */
    animation-delay: -.8s;

}
body:not(.disable-thumbnail-panning) .thumbnail-box.vertical-panning .thumb {
    animation-name: pan-thumbnail-vertically;
}

@keyframes pan-thumbnail-horizontally {
    /* This starts in the middle, pans left, pauses, pans right, pauses, returns to the middle, then pauses again. */
    0%   { object-position: left top; } /* left */
    40%  { object-position: right top; } /* pan right */
    50%  { object-position: right top; } /* pause */
    90%  { object-position: left top; } /* pan left */
    100%  { object-position: left top; } /* pause */
}

@keyframes pan-thumbnail-vertically {
    /* This starts at the top, pans down, pauses, pans back up, then pauses again. */
    0%   { object-position: 50% 0%; }
    40%  { object-position: 50% 100%; }
    50%  { object-position: 50% 100%; }
    90%  { object-position: 50% 0%; }
    100% { object-position: 50% 0%; }
}

.view-search-container .thumbnail-box:not(.muted) .muted {
    display: none;
}
.view-search-container .thumbnail-box .muted {
    pointer-events: none;
    left: 0;
    top: 50%;
    width: 100%;
    height: 32px;
    color: #000;
    position: absolute;
    text-shadow: 0px 1px 1px #fff, 0px -1px 1px #fff, 1px 0px 1px #fff, -1px 0px 1px #fff;
    font-size: 22px;
}

/* Zoom muted images in a little, and zoom them out on hover, which is the opposite
 * of other images.  This also helps hide the black bleed around the edge caused by
 * the blur. */
.view-search-container .thumbnail-box.muted .thumb {
    filter: blur(10px);
    transform: scale(1.25, 1.25);
}
body:not(.disable-thumbnail-zooming) .view-search-container .thumbnail-box.muted .thumb:hover {
    transform: scale(1, 1);
}

.view-search-container .dot img.thumb {
    /* This doesn't work as well on thumbnails. */
    /*
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
    image-rendering: pixelated;
    */
}

@keyframes flash-thumbnail {
    0% {
        filter: brightness(200%);
    }
}

.view-search-container .flash a {
    animation-name: flash-thumbnail;
    animation-duration: 300ms;
    animation-timing-function: ease-out;
    animation-iteration-count: 1;
}    

.box-link {
    display: inline-block;
    cursor: pointer;
    text-decoration: none;
    padding: .25em .5em;
    margin: .25em .25em;
    color: var(--box-link-fg-color);
    background-color: var(--box-link-bg-color);
    user-select: none;
    -moz-user-select: none;
    white-space: nowrap;
}

.box-link.disabled {
    color: var(--box-link-disabled-color);
}

.box-link:hover {
    background-color: var(--box-link-hover-color);
}

.box-link.selected {
    background-color: var(--box-link-selected-color);
}

.view-search-container .following-tag {
    text-decoration: none;
}

.view-search-container .search-options-row {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}

.view-search-container .search-options-row .hover-area {
    top: -10px;
    height: 150%;
}
.option-list {
    display: flex;
    flex-direction: column;
}
.search-options-row > div.active > .box-link {
    background-color: var(--box-link-selected-color);
}
.search-box {
    white-space: nowrap;
    margin-bottom: 4px;
    position: relative; /* to position the search dropdown */
}

/* The block around the input box and submit button.  A history dropdown widget will
 * be placed in here. */
.tag-search-box {
    display: inline-block;
    position: relative;
}

input.search-users {
    font-size: 1.2em;
    padding: 6px 10px;
    vertical-align: middle;
    padding-right: 30px; /* extra space for the submit button */
}
.user-search-box .search-submit-button {
    margin-left: -30px; /* overlap the input */
}
input.search-tags {
    font-size: 1.2em;
    padding: 6px 10px;
    vertical-align: middle;
}

/* Search box in the search page: */
.tag-search-box input.search-tags {
    padding-right: 60px; /* extra space for the submit button */
}

.search-submit-button {
    /* Work around HTML's stupid whitespace handling */
    font-size: 0;
    display: inline-block;
}

/* Search box in the menu: */
.navigation-search-box .search-submit-button {
    vertical-align: middle;
    margin-left: -30px; /* overlap the search box */
}
.navigation-search-box input.search-tags {
    padding-right: 30px; /* extra space for the submit button */
}

.view-search-container .right-side-button {
    display: inline-block;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
}
.view-search-container .edit-search-button {
    margin-left: -58px; /* overlap the input */
}
.view-search-container .right-side-button > svg
{
    vertical-align: middle;
}

.thumbnail-ui-box .avatar-container {
    float: right;
    position: relative;
    margin-left: 25px;
}

.image-for-suggestions {
    float: right;
    margin-left: 25px;
}
.image-for-suggestions > img {
    display: block;
    max-height: 150px;
    border-radius: 5px; /* matches the avatar display */
}

.grey-icon {
    color: var(--button-color);
}
:hover > .grey-icon {
    color: var(--button-highlight-color);
}
/* If a grey-icon is directly inside a visible popup menu, eg. the navigation icon: */
.popup-visible > .grey-icon {
    color: var(--button-highlight-color);
}

.mute-display .muted-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: blur(20px);
    opacity: .75;
}

.mute-display .muted-text {
    position: absolute;
    width: 100%;
    top: 50%;
    left: 0;
    text-align: center;
    font-size: 30px;
    color: #000;
    text-shadow: 0px 1px 1px #fff, 0px -1px 1px #fff, 1px 0px 1px #fff, -1px 0px 1px #fff;
}

/* Tag lists are usually inline.  Make the tag filter a vertical list. */
.member-tags-box .post-tag-list,
.search-tags-box .related-tag-list {
    max-height: 300px;
    display: block;
    overflow-x: hidden;
    overflow-y: auto;
    white-space: nowrap;
}
.member-tags-box .post-tag-list .following-tag,
.search-tags-box .related-tag-list .tag {
    display: block;
}

.member-tags-box .post-tag-list .following-tag:hover:after,
.search-tags-box .related-tag-list .tag:hover:after {
    left: auto;
    right: 0px;
}

/* These affect both the search edit and search history boxes. */
.input-dropdown {
    width: 500px; /* overridden by script */
    max-width: 800px;
    margin: 1px;
    z-index: 1;
    user-select: none;

    /* This is used for the search tag dropdown, which is in a fixed position at the top of the
     * screen.  Limit the height to the size of the window minus (roughly) its position. */
    max-height: 400px;
    max-height: calc(100vh - 400px);

    /* Always show the vertical scrollbar.  Otherwise, the resize handle falls under the buttons
     * when it's not shown. */
    overflow-x: hidden;
    overflow-y: scroll;
    resize: horizontal;
    position: absolute;
    background-color: #fff;
}

.search-history > .input-dropdown > .input-dropdown-list {
    display: flex;
    flex-direction: column;
    white-space: normal;
}
.input-dropdown > .input-dropdown-list > .entry {
    display: flex;
    flex-direction: row;
    color: #000;
    align-items: center;

    /* This 6px vertical padding should match the remove-history-entry padding. */
    padding: 6px 0;
}

.input-dropdown > .input-dropdown-list > .entry > .search {
    color: #000;
    flex: 1;
    padding-left: 7px;
    height: 100%;
}

.input-dropdown > .input-dropdown-list > .entry > .search .word {
    display: inline-flex;
    align-items: center;
    height: 100%;
    padding: 0px 5px;
}

.input-dropdown > .input-dropdown-list > .entry > .search .word.or {
    font-size: 12px;
    padding: 0;
    color: #333;
}

/* Styles specific to the search history version of the dropdown: */
.search-history > .input-dropdown > .input-dropdown-list > .entry .suggestion-icon {
    margin: 2px -2px 0 2px;    
}

.search-history > .input-dropdown > .input-dropdown-list > .entry:not(.autocomplete) .suggestion-icon {
    display: none;
}

.search-history > .input-dropdown > .input-dropdown-list > .entry.selected {
    background-color: #ffa;
}

.search-history > .input-dropdown > .input-dropdown-list > .entry:hover {
    background-color: #ddd;
}

.search-history > .input-dropdown > .input-dropdown-list .remove-history-entry {
    height: 30px;
    width: 30px;

    /* Set an arbitrarily low negative margin.  This makes it so the button extends into the
     * into the surrounding row's padding instead of pushing the whole row out.  See
     * .input-dropdown-list > .entry padding. */
    margin: -6px 0;

    display: inline-flex;
    align-items: center;
    justify-content: center;
    visibility: hidden;
}

/* Hide the button to remove history entries from non-history entries. */
.search-history > .input-dropdown > .input-dropdown-list > .entry:not(.history) .remove-history-entry {
    display: none;
}

.search-history > .input-dropdown > .input-dropdown-list > .entry:hover .remove-history-entry {
    visibility: visible;
}
.search-history > .input-dropdown > .input-dropdown-list .remove-history-entry:hover {
    color: #000;
    background-color: #c0c0c0;
}

/* Styles specific to the edit search version of the dropdown. */
.edit-search > .input-dropdown {
    padding: 4px 0;
}
/* The edit search list is shown as a wrapped list, so enable wrapping and switch items from flex to inline-flex. */
.edit-search > .input-dropdown > .input-dropdown-list {
    white-space: normal;
    max-width: 100%;
}

.edit-search > .input-dropdown > .input-dropdown-list > .entry {
    display: inline-flex;
}

.edit-search > .input-dropdown > .input-dropdown-list > .entry > A.search .tag.highlight { background-color: #eeee00; }
.edit-search > .input-dropdown > .input-dropdown-list > .entry > A.search .tag:hover { background-color: #0099FF; }
.edit-search > .input-dropdown > .input-dropdown-list > .entry > A.search .tag.highlight:hover { background-color: #00CCFF; }

.manga-thumbnail-container
{
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 240px;
    max-height: 30%;
    user-select: none;
    -moz-user-select: none;
}

body.hide-ui .manga-thumbnail-container
{
    display: none;
}

/* The .strip container is the overall strip.  This is a flexbox that puts the nav
 * arrows on the outside, and the thumb strip stretching in the middle.  The thumb
 * strip itself is also a flexbox, for the actual thumbs. */
.manga-thumbnail-container > .strip
{
    background-color: var(--ui-bg-color);
    height: 100%;
    display: flex;
    flex-direction: row;

    opacity: 0;
    transition: transform .15s, opacity .15s;
    transform: translate(0, 25px);
}

.manga-thumbnail-container.visible > .strip
{
    opacity: 1;
    transform: translate(0, 0);
}

.manga-thumbnail-container > .strip > .manga-thumbnails {
    flex: 1;

    display: flex;
    flex-direction: row;
    overflow: hidden;
    justify-content: left;
    scroll-behavior: smooth;
    height: 100%;
    padding: 5px 0;
}

.manga-thumbnail-container .manga-thumbnail-box
{
    cursor: pointer;
    height: 100%;
    margin: 0 5px;

    /* The first entry has the cursor inside it.  Set these to relative, so the
     * cursor position is relative to it. */
    position: relative;
}

.manga-thumbnail-container .manga-thumbnail-box img.manga-thumb
{
    height: 100%;
    width: auto;
    border-radius: 3px;

    /* This will limit the width to 300px, cropping if needed.  This prevents
     * very wide aspect ratio images from breaking the layout.  Only a fixed
     * size will work here, percentage values won't work. */
    max-width: 400px;
    object-fit: cover;
}

.manga-thumbnail-arrow
{
    height: 100%;
    width: 30px;
    margin: 0 6px;
}

.manga-thumbnail-arrow > svg
{
    fill: #888;
}
.manga-thumbnail-arrow:hover > svg
{
    fill: #ff0;
}
body.light .manga-thumbnail-arrow:hover > svg
{
    stroke: #aa0;
}

.manga-thumbnail-arrow > svg
{
    display: block;
    height: 100%;
    width: 100%;
    padding: 4px;
}

.thumb-list-cursor
{
    position: absolute;
    left: 0;
    bottom: -6px;
    width: 40px;
    height: 4px;
    background-color: var(--ui-fg-color);
    border-radius: 2px;
}

/* The right click context menu for the image view: */
.popup-context-menu {
    color: #fff;
    position: fixed;
    top: 100px;
    left: 350px;
    text-align: left;
    padding: 10px;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    user-select: none;
    -moz-user-select: none;
}

/* Hide the normal tooltips.  The context menu shows them differently. */
.popup-context-menu .popup:hover:after {
    display: none;
}

.popup-context-menu .tooltip-display {
    display: flex;
    align-items: stretch;
    padding: 10px 0 0 8px;
    pointer-events: none;
}
.popup-context-menu .tooltip-display .tooltip-display-text {
    background-color: var(--frame-bg-color);
    color: var(--frame-fg-color);
    padding: 2px 8px;
    border-radius: 4px;
}

.popup-context-menu .button-strip {
    display: flex;
    align-items: stretch;
}
.popup-context-menu .button-strip > .button-block {
    display: inline-block;
    background-color: var(--frame-bg-color);
    padding: 12px;
}

/* Remove the double horizontal padding: */
.popup-context-menu .button-strip > .button-block:not(:first-child) { padding-left: 0px; }

/* Remove the double vertical padding.  Do this with a negative margin instead of zeroing
 * the padding, so the rounded black background stays the same size. */
.popup-context-menu .button-strip:not(:last-child) > .button-block { margin-bottom: -12px; }

/* Round the outer corners of each strip. */
.popup-context-menu .button-strip > .button-block:first-child { border-radius: 5px 0 0 5px; }
.popup-context-menu .button-strip > .button-block:last-child { border-radius: 0 5px 5px 0; }

.popup-context-menu .button-strip .button {
    border-radius: 4px;
    padding: 6px;
    height: 100%;
    text-align: center;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    justify-content: center;
    background-color: var(--toggle-button-bg-dim-color);
    color: var(--toggle-button-fg-dim-color);
}

/* This nudges the zoom strip to the left by the width of one button, to add the browser
 * back button to the left of other buttons. */
.popup-context-menu .button-strip > .button-block.shift-left {
    margin-left: -56px;
}

/* Grey out the buttons if this strip isn't enabled. */
.popup-context-menu .button-strip .button:not(.enabled)
{
    cursor: inherit;
    color: var(--toggle-button-fg-disabled-color);
}
.popup-context-menu .button-strip .button > * {
    min-width: 32px;
}
.popup-context-menu .button-strip .button > svg {
    width: 32px;
    height: 32px;
}

.popup-context-menu .button-strip .button.enabled:hover {
    color: var(--toggle-button-fg-color);
}
.popup-context-menu .button-strip .button.enabled.selected {
    background-color: var(--toggle-button-bg-color);
    color: var(--toggle-button-fg-color);
}

/* We don't have a way to add classes to inlined SVGs yet, so for now just use nth-child.
   The first child is the + icon and the second child is -. */
.popup-context-menu .button-strip .button.button-zoom:not(.selected) > :nth-child(1) { display: none; }
.popup-context-menu .button-strip .button.button-zoom.selected > :nth-child(2) { display: none; }

/* Popup menu bookmarking */
.popup-context-menu .button-strip .button .tag-dropdown-arrow {
    width: 0; 
    height: 0; 
    border-top: 10px solid #222;
    border-left: 10px solid transparent;
    border-right: 10px solid transparent;
}
body.light .popup-context-menu .button-strip .button .tag-dropdown-arrow {
    border-top-color: #ccc;
}

.popup-context-menu .context-menu-image-info {
    /* Bottom align within the row. */
    align-self: flex-end;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: var(--box-link-bg-color);
    padding-right: 8px;
}
.popup-context-menu .context-menu-image-info > * {
    background-color: var(--box-link-bg-color);
    color: var(--box-link-fg-color);
    padding: 2px 0 0px 0px;
    font-size: .8em;
    font-weight: bold;
}

.popup-bookmark-tag-dropdown {
    background-color: var(--frame-bg-color);
    color: var(--frame-fg-color);
    position: absolute;
    padding: 4px;
    top: calc(100%);
    left: 0;
    border-radius: 0px 0px 4px 4px;

    /* Put this on top of other elements, like the image-ui tag list. */
    z-index: 1;
}
/* In the context menu version, nudge the tag dropdown up slightly to cover
 * the rounded corners. */
.popup-context-menu .popup-bookmark-tag-dropdown {
    top: calc(100% - 4px);
}

.popup-bookmark-tag-dropdown > .tag-list {
    display: flex;
    flex-direction: column;
    max-height: 200px;
    min-width: 200px;
    overflow-x: hidden;
    overflow-y: auto;
}

.popup-bookmark-tag-dropdown > .tag-right-button-strip {
    position: absolute;
    top: 0;
    left: 100%;
    background-color: var(--frame-bg-color);
    color: var(--frame-fg-color);
    display: flex;
    flex-direction: column;
    align-items: stretch;
}
.popup-bookmark-tag-dropdown > .tag-right-button-strip .tag-button {
    cursor: pointer;
}

.button.button-bookmark,
.button.button-like
{
    /* Center the count text. */
}
.button.button-bookmark .count,
.button.button-like .count
{
    color: var(--minor-text-fg-color);

    text-shadow:
        0px 1px 1px var(--minor-text-shadow-color),
        0px -1px 1px var(--minor-text-shadow-color),
        1px 0px 1px var(--minor-text-shadow-color),
        -1px 0px 1px var(--minor-text-shadow-color);
    font-size: .7em;
    font-weight: bold;
    position: absolute;
    top: calc(100% - 14px);
    left: 0;
    width: 100%;
    text-align: center;
}

.ui-box .button > svg {
    display: block;
}

.ui-box .button.button-bookmark .count,
.ui-box .button.button-like .count
{
    top: calc(100% - 11px);
    left: calc(-50px + 50%);
    width: 100px;
    pointer-events: none;
}

/* Nudge the public heart icon up a bit to make room for the bookmark count. 
 * Only do this on the popup menu, not image-ui. */
.popup-context-menu .button.button-bookmark.public > svg
{
    margin-top: -10px;
}
.popup-context-menu .button.button-like > svg
{
    margin-top: -2px;
}

/* Bookmark buttons.  These appear in image_ui and the popup menu. */
.button.button-bookmark.will-delete.enabled:hover svg.heart-image .delete {
    display: inline;
}

/* Hide the "delete" stroke over the heart icon unless clicking the button will
 * remove the bookmark. */
svg.heart-image .delete {
    display: none;
}

/* These are !important to override the default white coloring in the context
 * menu. */
.button-bookmark {
    color: #400 !important;
}
.button-bookmark.enabled {
    color: #800 !important;
    stroke: none;
}
.button-bookmark.bookmarked,
.button-bookmark.enabled:hover {
    color: #f00 !important;
    stroke: none;
}
/* Add a stroke around the heart on thumbnails for visibility.  Don't
 * change the black lock. */
.view-search-container .thumbnails .button-bookmark svg > .heart {
    stroke: #000;
    stroke-width: .5px;
}

/* This is a pain due to transition bugs in Firefox.  It doesn't like having
 * transition: transform on both an SVG and on individual paths inside the
 * SVG and clips the image incorrectly during the animation.  Work around this
 * by only placing transitions on the paths. */
.button.button-like > svg {
    color: var(--like-button-color);
}

.button.button-like.liked > svg {
    color: var(--like-button-liked-color);
}
.button.button-like.enabled:hover > svg {
    color: var(--like-button-hover-color);
}

.button.button-browser-back .arrow {
    transition: transform ease-in-out .15s;
    transform: translate(-2px, 0px);
}
.button.button-browser-back:hover .arrow {
    transform: translate(1px, 0px);
}
.button.button-like               > svg > * {
    transition: transform ease-in-out .15s;
    transform: translate(0, 0px);
}
.button.button-like               > svg > .mouth {
    transform: scale(1, .75);
}

.button.button-like.liked         > svg > * {
    transform: translate(0, -3px);
}
.button.button-like.liked         > svg > .mouth {
    transform: scale(1, 1.1) translate(0, -3px);
}
.button.button-like.enabled:hover > svg > * {
    transform: translate(0, -2px);
}
.button.button-like.enabled:hover > svg > .mouth {
    transform: scale(1, .9) translate(0, -3px);
}
.button-bookmark.public svg.heart-image .lock {
    display: none;
}
.button-bookmark svg.heart-image .lock {
    stroke: #888;
}
.view-manga-container {
    width: 100%;
    height: 100%;
    overflow-x: hidden;
    overflow-y: scroll;
}

.view-manga-container > .thumbnails {
    width: 100%;
    text-align: center;

    /* If we don't fill the screen, center. */
    margin: 0 auto;
}
.view-manga-container > .thumbnails {
    width: 100%;
}

.view-manga-container li.thumbnail-box {
    /* The size of .thumbnail-box is set to the dimensions of each thumb, not
     * including padding, so set box-sizing to content-box. */
//    box-sizing: content-box;
}
/* .thumbnail-inner centers each thumb in the box, and aligns it to the bottom. */
/*
 * .view-manga-container li.thumbnail-box > .thumbnail-inner {
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100%;
    width: 100%;
}

.view-manga-container img.thumb {
    border-radius: 4px;
    display: block;
}
.view-manga-container li.thumbnail-box {
    display: inline-block;
    padding: .5em;
    vertical-align: bottom;
}
*/

.whats-new-box {
    position: absolute;
    z-index: 1000;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.75);
    display: flex;
    align-items: center;
    justify-content: center;
}

.whats-new-box > .content {
    font-size: 18px;
    width: 80%;
    max-width: 800px;
    height: 80%;
    background-color: var(--ui-bg-color);
    color: var(--ui-fg-color);
    border-radius: 5px;
    position: relative;
}

.whats-new-box > .content > .scroll {
    width: 100%;
    height: 100%;
    overflow-y: auto;
    padding: 1em;
}

.whats-new-box .close-button {
    position: absolute;
    top: 5px;
    right: -40px;
    color: var(--button-color);
    background-color: var(--ui-bg-color);
    padding: 4px;
    border-radius: 5px;
    cursor: pointer;
}
.whats-new-box .close-button:hover {
    color: var(--button-highlight-color);
}
.whats-new-box .close-button > svg {
    display: block;
}

.whats-new-box .header {
    font-size: 40px;
    margin-bottom: 20px;
}

.whats-new-box .rev {
    display: inline-block;
    color: var(--box-link-fg-color);
    background-color: var(--box-link-bg-color);
    padding: 5px 10px;
}
.whats-new-box .text {
    margin: 1em 0;
    padding: 0 20px; /* inset horizontally a bit */
}
